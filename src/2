import categoriesApi from "@/api/categories/categories.api";
import productsApi from "@/api/products/products.api";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CategoryInterface } from "@/interfaces/Category.Interface.ts";
import { Product, ProductQuality } from "@/interfaces/Product.Interface.ts";
import queryClient from "@/main";
import { AddProductData, AddProductSchema } from "@/schemas/AddProductSchema";
import { RootState } from "@/store/store";
import { zodResolver } from "@hookform/resolvers/zod";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useMutation, useQuery } from "@tanstack/react-query";
import { X } from "lucide-react";
import React, { useEffect, useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { useSelector } from "react-redux";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";

const AddProduct = () => {
  const [product, setProduct] = useState<Product>({
    name: "",
    price: 0,
    tag: "",
    note: "",
    notes: [] as string[],
    tags: [] as string[],
    categories: [] as CategoryInterface[],
    category: {} as CategoryInterface,
    images: [] as File[],
    product_quality: "",
  });

  const [tempImagesUrl, setTempImagesUrl] = useState<string[]>([])

  const token = useSelector((state: RootState) => state.user?.token) as string;

  const form = useForm<AddProductData>({
    resolver: zodResolver(AddProductSchema),
    reValidateMode: "onChange",
  });

  const removeImage = (index: number) => {
    try {
      setProduct((prev: Product) => ({
        ...prev,
        images: prev?.images?.filter((_, i) => i !== index),
      }));
    } catch (err) {
      console.log(err);
    }
  };

  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {
    setProduct((prev: Product) => ({
      ...prev,
      images: [
        ...(product.images as File[]),
        ...Array.from(e.target.files || []),
      ],
    }));
  };

  const getImagesPreview = () => {
    const objectUrls = (product.images || []).map((image: File | string) => {
      if (image instanceof File) {
        return URL.createObjectURL(image)
      }

      return image
    })
    setTempImagesUrl(objectUrls)

    console.log(tempImagesUrl)
  };

  const deleteItem = (index: number, state: string) => {
    if (state === "notes") {
      setProduct((prev: any) => ({
        ...prev,
        notes: product.notes.filter((_, i) => i !== index),
      }));
    } else if (state === "tags") {
      setProduct((prev: any) => ({
        ...prev,
        tags: product.tags.filter((_, i) => i !== index),
      }));
    }
  };

  const { data: categories } = useQuery<CategoryInterface[]>({
    queryKey: ["categories"],
    queryFn: () => categoriesApi.GetAllCategories(),
    initialData: () => queryClient.getQueryData<any>(["categories"]).data || [],
    enabled: false,
    retry: 3,
  });

  const { mutate: createProduct } = useMutation({
    mutationFn: (data: any) => productsApi.CreateProduct(data, token),
    onMutate: () => {
      queryClient.invalidateQueries({ queryKey: ["category-products"] });
      const previousProducts = queryClient.getQueryData<Product[]>(["category-products"])
      return { previousProducts }
    },
    onSuccess: () => toast.success("Producto creado exitosamente"),
    onError: (error: any, context) => {
      queryClient.setQueryData(["category-products"], context.previousProducts)
      toast.success("Hubo un error al tratar de crear el producto");
      throw new Error(`Hubo un error! ${error}`);
    },
  });


  const onSubmit: SubmitHandler<AddProductData> = async (data, e: any) => {
    toast.success("Agregando producto...");
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append("product_name", data.product_name);
      formData.append("product_price", data.product_price.toString());
      formData.append("product_description", data.product_description);
      formData.append("product_quality", data.product_quality);
      formData.append("product_category", data.product_category);

      product?.tags?.forEach((tag: string) => {
        formData.append("product_tags[]", tag);
      });

      product.notes?.forEach((note: string) => {
        formData.append("product_notes[]", note);
      });
      product.images?.forEach((image: any) => {
        formData.append("product_images", image);
      });

      createProduct(formData);
    } catch (err) {
      toast.error("Hubo un error, verifica los campos");
      throw new Error("Hubo un error" + err);
    }
  };

  useEffect(() => {
    getImagesPreview();
  }, [product.images]);


  return (
    <section className="flex flex-col items-center justify-center py-24 px-4">
      <h1 className="text-3xl font-bold mb-8">Agregar producto</h1>
      <Form {...form}>
        <form
          className="flex flex-col justify-center w-full max-w-4xl gap-4"
          onSubmit={form.handleSubmit(onSubmit)}
        >

          <FormField control={form.control} name="product_name" render={({ field }) => (
            <FormItem>
              <FormControl>
                <Input
                  type="text"
                  {...field}
                  placeholder="Nombre del producto"
                  className="w-full"
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )} />

          <FormField control={form.control} name="product_description" render={({ field }) => (
            <FormItem>
              <FormControl>
                <Textarea
                  {...field}
                  className="bg-transparent w-full"
                  placeholder="Descripcion"
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )} />

          <FormField control={form.control} name="product_price" render={({ field }) => (
            <FormItem>
              <FormControl>
                <Input
                  type="number"
                  {...field}
                  onChangeCapture={(e) => {
        return parseInt(e.currentTarget.value)
                  }}
                  placeholder="Precio del producto"
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )} />



          <FormField
            control={form.control}
            name="product_quality"
            render={({ field }) => (
              <RadioGroup
                onValueChange={field.onChange}
                className="w-full flex items-center justify-center"
              >
                {Object.values(ProductQuality).map((item: any) => (
                  <FormItem key={item} className="flex items-center gap-2">
                    <FormControl>
                      <RadioGroupItem value={item} />
                    </FormControl>
                    <FormLabel>{item}</FormLabel>
                  </FormItem>
                ))}

              </RadioGroup>
            )}
          />

          <FormField
            control={form.control}
            name="product_category"
            render={({ field }) => (
              <FormItem>
                <Select onValueChange={field.onChange}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecciona una categoria" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {categories?.map((category: any) => (
                      <SelectItem key={category.id} value={category.category_name}>{category.category_name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="flex flex-col justify-center gap-8">
            <div className="flex flex-col gap-4">
              <label htmlFor="image" className="text-xl font-bold">
                Imagenes del producto
              </label>
              <div className="flex gap-4">
                {product.images && product?.images?.length > 0
                  ? (
                    tempImagesUrl.length >= 1 && tempImagesUrl.map((imageUrl: any, index: any) => (
                      <div key={index}
                      >
                        <img
                          src={imageUrl as string}
                          alt="Imagen del producto"
                          className="w-32 h-32 object-cover rounded-xl"
                        />
                        <button
                          className="bg-red-500 text-white p-1 rounded-full relative bottom-32 left-24"
                          type="button"
                          onClick={() => removeImage(index)}
                        >
                          <X size={15} />
                        </button>
                      </div>
                    ))
                  )
                  : (
                    <div>
                      <p className="text-sm placeholder-gray-500">
                        Aquí se mostrarán las imagenes que selecciones...
                      </p>
                    </div>
                  )}
              </div>
            </div>
            <FormField control={form.control} name="product_images" render={({ field }) => (
              <FormItem>
                <FormControl>
                  <Input
                    type="file"
                    accept="image/*"
                    onChangeCapture={handleImage}
                    multiple
                    {...field}
                    className="border-black"
                    value=""
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )} />
          </div>
          <div className="flex flex-col md:flex-row gap-4 w-full">
            <div className="space-y-4 border p-2 border-black rounded-xl w-full">
              <Input
                name="tags"
                type="text"
                placeholder="Etiquetas del producto"
                value={product.tag}
                onChange={(e) =>
                  setProduct((prev) => ({
                    ...prev,
                    tag: e.target.value,
                  }))}
              />
              <Button
                type="button"
                className="bg-black w-full"
                onClick={() =>
                  setProduct((prev) => ({
                    ...prev,
                    tags: [...product.tags, product.tag] as string[],
                  }))}
              >
                Añadir tag
              </Button>

              <ul className="grid grid-cols-2 gap-4  ">
                {product.tags.map((tag, index) => (
                  <div
                    key={index}
                    className="p-2 border  border-black rounded flex items-center gap-4 "
                  >
                    <p className="w-full">{tag}</p>
                    <button
                      type="button"
                      className="bg-red-500  rounded-full p-1"
                      onClick={() => deleteItem(index, "tags")}
                    >
                      <X size={20} color="white" />
                    </button>
                  </div>

                ))}
              </ul>
            </div>
            <div className="space-y-4 border p-2 border-black rounded-xl w-full">
              <Input
                name="notes"
                type="text"
                placeholder="Notas del producto"
                value={product.note}
                onChange={(e) =>
                  setProduct((prev) => ({
                    ...prev,
                    note: e.target.value,
                  }))}
              />

              <Button
                type="button"
                className="bg-black w-full"
                onClick={() =>
                  setProduct((prev: Product) => ({
                    ...prev,
                    notes: [...(product.notes || []), product.note] as string[],
                  }))}
              >
                Añadir nota
              </Button>
              <ul className="grid grid-cols-2  gap-4 ">
                {product?.notes?.map((note, index) => (
                  <li
                    key={index}
                    className="p-2 border border-black rounded flex items-center gap-4"
                  >
                    <p className="">{note}</p>
                    <button
                      type="button"
                      className="bg-red-500 rounded-full p-1"
                      onClick={() => deleteItem(index, "notes")}
                    >
                      <X size={20} color="white" />
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          <Button
            type="submit"
            className="border rounded-xl w-full p-2 border-black hover:cursor-pointer"
          >Añadir producto</Button>
        </form>
      </Form>
    </section>
  );
};

export default AddProduct;
